#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
const int kinds[5][100][5][2] = {{{{}}},
	{{{1, 0}}, {{1, 1}}, {{1, 2}}, {{1, 3}}},
	{{{2, 0}}, {{2, 1}}, {{2, 2}}, {{1, 0}, {1, 0}}, {{1, 0}, {1, 1}}, {{1, 0}, {1, 2}}, {{1, 0}, {1, 3}}, {{1, 1}, {1, 1}}, {{1, 1}, {1, 2}}, {{1, 1}, {1, 3}}, {{1, 2}, {1, 2}}, {{1, 2}, {1, 3}}, {{1, 3}, {1, 3}}},
	{{{3, 0}}, {{3, 1}}, {{1, 0}, {2, 0}}, {{1, 0}, {2, 1}}, {{1, 0}, {2, 2}}, {{1, 1}, {2, 0}}, {{1, 1}, {2, 1}}, {{1, 1}, {2, 2}}, {{1, 2}, {2, 0}}, {{1, 2}, {2, 1}}, {{1, 2}, {2, 2}}, {{1, 3}, {2, 0}}, {{1, 3}, {2, 1}}, {{1, 3}, {2, 2}}, {{1, 0}, {1, 0}, {1, 0}}, {{1, 0}, {1, 0}, {1, 1}}, {{1, 0}, {1, 0}, {1, 2}}, {{1, 0}, {1, 0}, {1, 3}}, {{1, 0}, {1, 1}, {1, 1}}, {{1, 0}, {1, 1}, {1, 2}}, {{1, 0}, {1, 1}, {1, 3}}, {{1, 0}, {1, 2}, {1, 2}}, {{1, 0}, {1, 2}, {1, 3}}, {{1, 0}, {1, 3}, {1, 3}}, {{1, 1}, {1, 1}, {1, 1}}, {{1, 1}, {1, 1}, {1, 2}}, {{1, 1}, {1, 1}, {1, 3}}, {{1, 1}, {1, 2}, {1, 2}}, {{1, 1}, {1, 2}, {1, 3}}, {{1, 1}, {1, 3}, {1, 3}}, {{1, 2}, {1, 2}, {1, 2}}, {{1, 2}, {1, 2}, {1, 3}}, {{1, 2}, {1, 3}, {1, 3}}, {{1, 3}, {1, 3}, {1, 3}}},
	{{{4, 0}}, {{3, 0}, {1, 0}}, {{3, 0}, {1, 1}}, {{3, 0}, {1, 2}}, {{3, 0}, {1, 3}}, {{3, 1}, {1, 0}}, {{3, 1}, {1, 1}}, {{3, 1}, {1, 2}}, {{3, 1}, {1, 3}}, {{2, 0}, {2, 0}}, {{2, 0}, {2, 1}}, {{2, 0}, {2, 2}}, {{2, 1}, {2, 1}}, {{2, 1}, {2, 2}}, {{2, 2}, {2, 2}}, {{2, 0}, {1, 0}, {1, 0}}, {{2, 0}, {1, 0}, {1, 1}}, {{2, 0}, {1, 0}, {1, 2}}, {{2, 0}, {1, 0}, {1, 3}}, {{2, 0}, {1, 1}, {1, 1}}, {{2, 0}, {1, 1}, {1, 2}}, {{2, 0}, {1, 1}, {1, 3}}, {{2, 0}, {1, 2}, {1, 2}}, {{2, 0}, {1, 2}, {1, 3}}, {{2, 0}, {1, 3}, {1, 3}}, {{2, 1}, {1, 0}, {1, 0}}, {{2, 1}, {1, 0}, {1, 1}}, {{2, 1}, {1, 0}, {1, 2}}, {{2, 1}, {1, 0}, {1, 3}}, {{2, 1}, {1, 1}, {1, 1}}, {{2, 1}, {1, 1}, {1, 2}}, {{2, 1}, {1, 1}, {1, 3}}, {{2, 1}, {1, 2}, {1, 2}}, {{2, 1}, {1, 2}, {1, 3}}, {{2, 1}, {1, 3}, {1, 3}}, {{2, 2}, {1, 0}, {1, 0}}, {{2, 2}, {1, 0}, {1, 1}}, {{2, 2}, {1, 0}, {1, 2}}, {{2, 2}, {1, 0}, {1, 3}}, {{2, 2}, {1, 1}, {1, 1}}, {{2, 2}, {1, 1}, {1, 2}}, {{2, 2}, {1, 1}, {1, 3}}, {{2, 2}, {1, 2}, {1, 2}}, {{2, 2}, {1, 2}, {1, 3}}, {{2, 2}, {1, 3}, {1, 3}}, {{1, 0}, {1, 0}, {1, 0}, {1, 0}}, {{1, 0}, {1, 0}, {1, 0}, {1, 1}}, {{1, 0}, {1, 0}, {1, 0}, {1, 2}}, {{1, 0}, {1, 0}, {1, 0}, {1, 3}}, {{1, 0}, {1, 0}, {1, 1}, {1, 1}}, {{1, 0}, {1, 0}, {1, 1}, {1, 2}}, {{1, 0}, {1, 0}, {1, 1}, {1, 3}}, {{1, 0}, {1, 0}, {1, 2}, {1, 2}}, {{1, 0}, {1, 0}, {1, 2}, {1, 3}}, {{1, 0}, {1, 0}, {1, 3}, {1, 3}}, {{1, 0}, {1, 1}, {1, 1}, {1, 1}}, {{1, 0}, {1, 1}, {1, 1}, {1, 2}}, {{1, 0}, {1, 1}, {1, 1}, {1, 3}}, {{1, 0}, {1, 1}, {1, 2}, {1, 2}}, {{1, 0}, {1, 1}, {1, 2}, {1, 3}}, {{1, 0}, {1, 1}, {1, 3}, {1, 3}}, {{1, 0}, {1, 2}, {1, 2}, {1, 2}}, {{1, 0}, {1, 2}, {1, 2}, {1, 3}}, {{1, 0}, {1, 2}, {1, 3}, {1, 3}}, {{1, 0}, {1, 3}, {1, 3}, {1, 3}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}}, {{1, 1}, {1, 1}, {1, 1}, {1, 2}}, {{1, 1}, {1, 1}, {1, 1}, {1, 3}}, {{1, 1}, {1, 1}, {1, 2}, {1, 2}}, {{1, 1}, {1, 1}, {1, 2}, {1, 3}}, {{1, 1}, {1, 1}, {1, 3}, {1, 3}}, {{1, 1}, {1, 2}, {1, 2}, {1, 2}}, {{1, 1}, {1, 2}, {1, 2}, {1, 3}}, {{1, 1}, {1, 2}, {1, 3}, {1, 3}}, {{1, 1}, {1, 3}, {1, 3}, {1, 3}}, {{1, 2}, {1, 2}, {1, 2}, {1, 2}}, {{1, 2}, {1, 2}, {1, 2}, {1, 3}}, {{1, 2}, {1, 2}, {1, 3}, {1, 3}}, {{1, 2}, {1, 3}, {1, 3}, {1, 3}}, {{1, 3}, {1, 3}, {1, 3}, {1, 3}}}};
std::vector<int> a[36], ans[9];
int f[37][100000], pre[37][100000], g[37][100000], b[36];
int main() {
	freopen("tickets.in", "r",stdin);
	freopen("tickets.out", "w",stdout);
	int n; scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		int l; scanf("%d%d", &l, &b[i]);
		for (int j = 0; j < l; j++) {
			int x; scanf("%d", &x); a[i].push_back(x);
		}
	}
	memset(f, 0xC0, sizeof f);
	f[0][9] = 0;
	for (int k = 0; k < n; k++) {
		int size = a[k].size();
		for (int i = 0; i < 100000; i++) {
			if (f[k][i] < 0) continue;
			int tmp[5];
			for (int j = 0, t = i; j < 5; j++) tmp[j] = t%10, t /= 10;
			int sum = 0;
			for (int j = 0; j < 5; j++) sum += tmp[j];
			if (sum > 9) continue;
			for (int j = 0; kinds[size][j][0][0]; j++) {
				int tmp2[5];
				for (int t = 0; t < 5; t++) tmp2[t] = tmp[t];
				int r = f[k][i], flag = 1;
				for (int p = 0; kinds[size][j][p][0]; p++) {
					if (tmp2[kinds[size][j][p][1]] == 0) {
						flag = 0;
						break;
					}
					tmp2[kinds[size][j][p][1]]--, tmp2[kinds[size][j][p][0]+kinds[size][j][p][1]]++;
					r += b[k]*kinds[size][j][p][0]*(kinds[size][j][p][0]-1);
				}
				if (!flag) continue;
				int q = 0;
				for (int t = 0, x = 1; t < 5; t++, x *= 10) q += x*tmp2[t];
				if (f[k+1][q] < r)
					f[k+1][q] = r, pre[k+1][q] = i, g[k+1][q] = j;
			}
		}
	}
	int ansf = -10000, ansi = 0;
	for (int i = 0; i < 100000; i++)
		if (f[n][i] > ansf) ansf = f[n][i], ansi = i;
	printf("%d\n", ansf);
	std::vector<std::pair<int, int> > path;
	for (int i = n, j = ansi; i; i--) {
		path.push_back(std::pair<int, int>(i, j));
		j = pre[i][j];
	}
	std::reverse(path.begin(), path.end());
	for (int i = 0; i < path.size(); i++) {
		int kind = g[i+1][path[i].second], size = a[i].size();
		for (int p = 0, k = 0; k < a[i].size(); p++) {
			int r = 0;
			for (; r < 9; r++)
				if (ans[r].size() == kinds[size][kind][p][1]) break;
			for (int q = 0; q < kinds[size][kind][p][0]; q++, k++)
				ans[r].push_back(a[i][k]);
		}
	}
	for (int i = 0; i < 9; i++) {
		for (; ans[i].size() < 4; ans[i].push_back(0));
		printf("%d", ans[i][0]);
		for (int j = 1; j < ans[i].size(); j++) printf(" %d", ans[i][j]);
		puts("");
	}
}
